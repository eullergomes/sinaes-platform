generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DIRECAO
  COORDENADOR
}

enum CourseLevel {
  LICENCIATURA
  BACHARELADO
  ESPECIALIZACAO
  MESTRADO
  DOUTORADO
}

enum CourseModality {
  PRESENCIAL
  EAD
  HIBRIDO
}

enum IndicatorStatus {
  CONCLUIDO
  NAO_PREENCHIDO
  EM_EDICAO
}

enum IndicatorGrade {
  NSA
  G1  @map("1")
  G2  @map("2")
  G3  @map("3")
  G4  @map("4")
  G5  @map("5")
}

enum NsaPolicy {
  FIXED_APPLICABLE
  FIXED_NSA
  COURSE_DEPENDENT
}

enum StorageKind {
  INTERNAL
  EXTERNAL
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(COORDENADOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  managedCourses Course[] @relation("CourseCoordinator")

  evidenceSubmissions EvidenceSubmission[]
  evidenceFiles       EvidenceFile[]
}

model DimensionDefinition {
  id         String                @id @default(auto()) @map("_id") @db.ObjectId
  number     Int                   @unique
  title      String
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  indicators IndicatorDefinition[]
}

model IndicatorDefinition {
  id            String                 @id @default(auto()) @map("_id") @db.ObjectId
  code          String                 @unique
  name          String
  dimensionId   String                 @db.ObjectId
  dimension     DimensionDefinition    @relation(fields: [dimensionId], references: [id])
  nsaPolicy     NsaPolicy
  criteriaTable Json?
  requirements  IndicatorRequirement[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt

  CourseIndicator    CourseIndicator[]
  EvidenceSubmission EvidenceSubmission[]
}

model EvidenceRequirement {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  slug        String                 @unique
  title       String
  description String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  indicators  IndicatorRequirement[]
  submissions EvidenceSubmission[]
}

model IndicatorRequirement {
  id            String              @id @default(auto()) @map("_id") @db.ObjectId
  indicatorId   String              @db.ObjectId
  requirementId String              @db.ObjectId
  indicator     IndicatorDefinition @relation(fields: [indicatorId], references: [id])
  requirement   EvidenceRequirement @relation(fields: [requirementId], references: [id])
  order         Int?
  notes         String?

  @@unique([indicatorId, requirementId])
}

model Course {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  slug      String          @unique
  emecCode  Int?            @unique
  name      String
  level     CourseLevel?
  modality  CourseModality?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  coordinatorId String? @db.ObjectId
  coordinator   User?   @relation("CourseCoordinator", fields: [coordinatorId], references: [id])

  indicators CourseIndicator[]
  evidences  EvidenceSubmission[]
}

model CourseIndicator {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  courseId         String              @db.ObjectId
  indicatorDefId   String              @db.ObjectId
  evaluationYear   Int
  course           Course              @relation(fields: [courseId], references: [id])
  indicatorDef     IndicatorDefinition @relation(fields: [indicatorDefId], references: [id])
  nsaApplicable    Boolean             @default(true)
  nsaLocked        Boolean             @default(false)
  grade            IndicatorGrade      @default(NSA)
  status           IndicatorStatus     @default(EM_EDICAO)
  lastUpdate       DateTime?
  justification    String?
  correctiveAction String?
  responsible      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, indicatorDefId, evaluationYear])
  @@index([courseId])
  @@index([indicatorDefId])
  @@index([evaluationYear])
}

model EvidenceSubmission {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  courseId            String               @db.ObjectId
  requirementId       String               @db.ObjectId
  course              Course               @relation(fields: [courseId], references: [id])
  requirement         EvidenceRequirement  @relation(fields: [requirementId], references: [id])
  folderUrl           String?
  firstIndicatorDefId String?              @db.ObjectId
  firstIndicatorDef   IndicatorDefinition? @relation(fields: [firstIndicatorDefId], references: [id])
  files               EvidenceFile[]

  createdByUserId String? @db.ObjectId
  createdByUser   User?   @relation(fields: [createdByUserId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, requirementId])
  @@index([courseId])
  @@index([requirementId])
}

model EvidenceFile {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  submissionId String             @db.ObjectId
  submission   EvidenceSubmission @relation(fields: [submissionId], references: [id])
  kind         StorageKind        @default(INTERNAL)
  storageKey   String?
  externalUrl  String?
  fileName     String
  mimeType     String
  sizeBytes    Int?
  uploadedAt   DateTime           @default(now())

  uploadedByUserId String? @db.ObjectId
  uploadedByUser   User?   @relation(fields: [uploadedByUserId], references: [id])
}
